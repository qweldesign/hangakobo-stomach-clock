// Generated by CoffeeScript 1.12.7

/*
	Custom
	Last update: 2018/04/30

	Author:	Taigo Ito
	Site: https://tgco.jp
	Twitter: @taigoito
	Location: Tokyo
 */
var Fader, MyEvent, Scrolling, Slidebar, Slidemenu, Slider, Util,
  bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

if (!(typeof history.pushState === "function")) {
  $('body').append('<p class="no-support">このWebページは現在ご利用のブラウザをサポートしていません。<br>最新のブラウザをインストールして再度ご来訪ください。</p>');
}

if ('ontouchend' in document && $(window).width() < 1024) {
  MyEvent = {
    isSupportTouch: true,
    touch: 'touchend',
    start: 'touchstart',
    move: 'touchmove',
    end: 'touchend',
    points: {
      x: 0,
      y: 0
    },
    isDragging: false
  };
} else {
  MyEvent = {
    isSupportTouch: false,
    touch: 'click',
    start: 'mousedown',
    move: 'mousemove',
    end: 'mouseup mouseout',
    points: {
      x: 0,
      y: 0
    },
    isDragging: false
  };
}

if ('onwheel' in document) {
  MyEvent.wheel = 'wheel';
} else {
  MyEvent.wheel = 'mousewheel';
}

Util = {
  transitionEnd: function($el) {
    var callback, dfd;
    dfd = new $.Deferred;
    callback = function() {
      dfd.resolve($el);
    };
    if (($el != null) && $el.length && ($el.css('transition') != null)) {
      $el.on('transitionend', callback);
      dfd.done(function() {
        $el.off('transitionend', callback);
      });
    } else {
      dfd.resolve();
    }
    return dfd;
  },
  animationEnd: function($el) {
    var callback, dfd;
    dfd = new $.Deferred;
    callback = function() {
      dfd.resolve($el);
    };
    if (($el != null) && $el.length && ($el.css('animation') != null)) {
      $el.on('animationend', callback);
      dfd.done(function() {
        $el.off('animationend', callback);
      });
    } else {
      dfd.resolve();
    }
    return dfd;
  }
};

$(document).on(MyEvent.touch, '[data-history="back"]', function() {
  history.back();
  return false;
});


/*
	Scrolling
	Last update: 2017/10/15
 */

Scrolling = (function() {
  function Scrolling(options) {
    var ref, targetSelector;
    if (options == null) {
      options = {};
    }
    this.$el = (ref = options.$el) != null ? ref : $(document);
    targetSelector = location.hash;
    if (this.$el && targetSelector) {
      this.scroll(targetSelector);
    }
    this.handleEvents();
  }

  Scrolling.prototype.handleEvents = function() {
    if (this.$el) {
      this.$el.on(MyEvent.touch, '[data-location="scroll"]', (function(_this) {
        return function(el) {
          var $target, targetSelector;
          $target = $(el.currentTarget);
          targetSelector = $target.data('target');
          _this.scroll(targetSelector);
          return false;
        };
      })(this));
    }
  };

  Scrolling.prototype.scroll = function(targetSelector) {
    var dfd, targetTop;
    dfd = new $.Deferred;
    targetTop = $(targetSelector).offset().top;
    targetTop -= $(window).height() * 0.05;
    $('html, body').animate({
      scrollTop: targetTop
    }, 1000, 'swing', function() {
      return dfd.resolve();
    });
    return dfd;
  };

  return Scrolling;

})();


/*
	Slidebar
	Last update: 2017/10/15
 */

Slidebar = (function(superClass) {
  extend(Slidebar, superClass);

  function Slidebar(options) {
    var data, ref, ref1, ref2, ref3, ref4, ref5, ref6, ref7, ref8, ref9, selector;
    if (options == null) {
      options = {};
    }
    this.windowScrollHandler = bind(this.windowScrollHandler, this);
    options.$el || (options.$el = false);
    this.$targetEl = (ref = options.$targetEl) != null ? ref : $('main + aside[role="complementary"]');
    this.$template = (ref1 = options.$template) != null ? ref1 : $('#slidebar-template');
    data = (ref2 = options.data) != null ? ref2 : {};
    options.selector || (options.selector = {});
    selector = {
      abs: (ref3 = options.selector.abs) != null ? ref3 : '#slidebar-open-abs',
      fixed: (ref4 = options.selector.fixed) != null ? ref4 : '#slidebar-open-fixed',
      overlay: (ref5 = options.selector.overlay) != null ? ref5 : '#slidebar-overlay',
      bar: (ref6 = options.selector.bar) != null ? ref6 : '#slidebar',
      menu: (ref7 = options.selector.menu) != null ? ref7 : '#slidemenu',
      close: (ref8 = options.selector.close) != null ? ref8 : '#slidebar-close'
    };
    this.render(data);
    this.$abs = this.$targetEl.find(selector.abs);
    this.$fixed = this.$targetEl.find(selector.fixed);
    this.$overlay = this.$targetEl.find(selector.overlay);
    this.$bar = this.$targetEl.find(selector.bar);
    this.$menu = this.$targetEl.find(selector.menu);
    this.$close = this.$targetEl.find(selector.close);
    this.showBarHeight = (ref9 = options.showBarHeight) != null ? ref9 : false;
    if (this.showBarHeight) {
      this.isScrolled = false;
    } else {
      this.$fixed.addClass('show');
      this.showBarHeight = 0;
      this.isScrolled = true;
    }
    this.isShown = false;
    Slidebar.__super__.constructor.call(this, options);
  }

  Slidebar.prototype.render = function(data) {
    var compiled, output;
    compiled = _.template(this.$template.html());
    output = compiled({
      data: data
    });
    return this.$targetEl.append(output);
  };

  Slidebar.prototype.handleEvents = function() {
    $('[data-toggle="slidebar"]').on(MyEvent.touch, (function(_this) {
      return function() {
        if (_this.isShown) {
          _this.hideBar();
        } else {
          _this.showBar();
        }
        return false;
      };
    })(this));
    $(window).on('scroll', this.windowScrollHandler);
    Slidebar.__super__.handleEvents.call(this);
  };

  Slidebar.prototype.showBar = function() {
    var dfd1, dfd2;
    dfd1 = new $.Deferred();
    dfd2 = new $.Deferred();
    this.isShown = true;
    if (this.isScrolled) {
      dfd1 = Util.transitionEnd(this.$fixed.removeClass('show'));
    } else {
      dfd1.resolve();
    }
    dfd1.done((function(_this) {
      return function() {
        Util.transitionEnd(_this.$bar.addClass('show')).then(function() {
          _this.$overlay.addClass('show');
          _this.$close.addClass('show');
          Util.transitionEnd(_this.$menu.addClass('show')).then(function() {
            dfd2.resolve();
          });
        });
      };
    })(this));
    return dfd2;
  };

  Slidebar.prototype.hideBar = function() {
    var dfd1, dfd2;
    dfd1 = new $.Deferred();
    dfd2 = new $.Deferred();
    this.isShown = false;
    this.$overlay.removeClass('show');
    this.$close.removeClass('show');
    Util.transitionEnd(this.$menu.removeClass('show')).then((function(_this) {
      return function() {
        Util.transitionEnd(_this.$bar.removeClass('show')).then(function() {
          dfd1.resolve();
        });
      };
    })(this));
    dfd1.done((function(_this) {
      return function() {
        if (_this.isScrolled) {
          _this.$fixed.addClass('show');
        }
        dfd2.resolve();
      };
    })(this));
    return dfd2;
  };

  Slidebar.prototype.windowScrollHandler = function() {
    var h;
    h = $(window).height() * this.showBarHeight;
    if (this.isShown) {
      this.hideBar();
    } else {
      if ($(window).scrollTop() > h && !this.isScrolled) {
        this.isScrolled = true;
        this.$fixed.addClass('show');
      } else if ($(window).scrollTop() < h && this.isScrolled) {
        this.isScrolled = false;
        this.$fixed.removeClass('show');
      }
    }
  };

  return Slidebar;

})(Scrolling);


/*
	Slidemenu
	Last update: 2017/10/15
 */

Slidemenu = (function(superClass) {
  extend(Slidemenu, superClass);

  function Slidemenu(options) {
    var $nav, listItems, ref;
    if (options == null) {
      options = {};
    }
    options.$el || (options.$el = $(document));
    $nav = (ref = options.$nav) != null ? ref : $('nav');
    listItems = [];
    $nav.find('ul').each(function(i, ul) {
      listItems[i] = [];
      $(ul).find('li').each(function(j, li) {
        var $a, $li;
        $a = $(li).find('a').clone();
        $li = $('<li>').append($a);
        listItems[i][j] = {
          html: $li.html()
        };
      });
    });
    options.data || (options.data = listItems);
    Slidemenu.__super__.constructor.call(this, options);
    return;
  }

  Slidemenu.prototype.scroll = function(targetId) {
    var dfd;
    dfd = new $.Deferred();
    if (this.isShown) {
      dfd = this.hideBar();
    } else {
      dfd.resolve();
    }
    return dfd.done(function() {
      return Slidemenu.__super__.scroll.call(this, targetId);
    });
  };

  return Slidemenu;

})(Slidebar);


/*
	Fader
	Last update: 2017/11/28
 */

Fader = (function() {
  function Fader(options) {
    var ref, ref1, ref2, ref3, ref4, ref5, ref6, ref7;
    if (options == null) {
      options = {};
    }
    this.$fader = (ref = options.$fader) != null ? ref : $('.fader');
    this.$items = $('.fader-item').detach();
    this.$toggle = (ref1 = options.$prev) != null ? ref1 : $('.fader-toggle');
    this.$prev = (ref2 = options.$prev) != null ? ref2 : $('.fader-prev');
    this.$next = (ref3 = options.$next) != null ? ref3 : $('.fader-next');
    this.hasCounter = (ref4 = options.hasCounter) != null ? ref4 : false;
    this.interval = (ref5 = options.interval) != null ? ref5 : 5000;
    this.activeIndex = 0;
    this.len = this.$items.length;
    if (this.hasCounter) {
      this.$counterCurrent = (ref6 = options.counterCurrent) != null ? ref6 : $('.fader-counter-current');
      this.$counterMax = (ref7 = options.counterMax) != null ? ref7 : $('.fader-counter-max');
      this.$counterCurrent.text(this.activeIndex + 1);
      this.$counterMax.text(this.len);
    }
    this.isPlay = false;
    if (this.interval && this.len > 1) {
      this.isPlay = true;
    }
    this.$currentItem = $(this.$items[this.activeIndex]);
    this.$fader.append(this.$currentItem);
    setTimeout((function(_this) {
      return function() {
        if (_this.isPlay) {
          return _this.move(1);
        }
      };
    })(this), this.interval);
    this.handleEvents();
  }

  Fader.prototype.handleEvents = function() {
    $(document).on(MyEvent.touch, '[data-toggle="fader"]', (function(_this) {
      return function() {
        if (_this.interval) {
          _this.toggleMode();
        }
        return false;
      };
    })(this)).on(MyEvent.touch, '[data-fade="prev"]', (function(_this) {
      return function() {
        _this.move(-1);
        return false;
      };
    })(this)).on(MyEvent.touch, '[data-fade="next"]', (function(_this) {
      return function() {
        _this.move(1);
        return false;
      };
    })(this));
  };

  Fader.prototype.toggleMode = function() {
    if (this.isPlay) {
      this.isPlay = false;
    } else {
      this.isPlay = true;
      setTimeout((function(_this) {
        return function() {
          if (_this.isPlay) {
            return _this.move(1);
          }
        };
      })(this), this.interval);
    }
  };

  Fader.prototype.move = function(direction) {
    var $nextItem;
    this.activeIndex += this.len + direction;
    this.activeIndex = this.activeIndex % this.len;
    $nextItem = $(this.$items[this.activeIndex]);
    this.$fader.append($nextItem);
    if (this.hasCounter) {
      this.$counterCurrent.html(this.activeIndex + 1);
    }
    Util.animationEnd($nextItem.addClass('enter')).done((function(_this) {
      return function() {
        return $nextItem.removeClass('enter');
      };
    })(this));
    Util.animationEnd(this.$currentItem.addClass('leave')).done((function(_this) {
      return function() {
        _this.$currentItem.removeClass('leave');
        _this.$currentItem.remove();
        _this.$currentItem = $nextItem;
        return setTimeout(function() {
          if (_this.isPlay) {
            return _this.move(1);
          }
        }, _this.interval);
      };
    })(this));
  };

  return Fader;

})();


/*
	Slider
	Last update: 2018/10/01
 */

Slider = (function() {
  function Slider(options) {
    var ref, ref1, ref10, ref11, ref2, ref3, ref4, ref5, ref6, ref7, ref8, ref9;
    if (options == null) {
      options = {};
    }
    this.resize = bind(this.resize, this);
    this.myWheelHandler = bind(this.myWheelHandler, this);
    this.myEndHandler = bind(this.myEndHandler, this);
    this.myMoveHandler = bind(this.myMoveHandler, this);
    this.myStartHandler = bind(this.myStartHandler, this);
    this.isNotLoop = (ref = options.isNotLoop) != null ? ref : false;
    this.isUniformity = (ref1 = options.isUniformity) != null ? ref1 : false;
    this.hasWheelHandling = (ref2 = options.hasWheelHandling) != null ? ref2 : false;
    this.hasVisibility = (ref3 = options.hasVisibility) != null ? ref3 : false;
    this.hasCaption = (ref4 = options.hasCaption) != null ? ref4 : false;
    this.startIndex = (ref5 = options.startIndex) != null ? ref5 : 0;
    this.standardImageSize = (ref6 = options.standardImageSize) != null ? ref6 : 960;
    this.$slider = (ref7 = options.$slider) != null ? ref7 : $('.slider');
    this.$inner = (ref8 = options.$inner) != null ? ref8 : $('.slider-inner');
    this.$items = this.$inner.children();
    this.$caption = (ref9 = options.$caption) != null ? ref9 : $('.slider-caption');
    this.$prev = (ref10 = options.$prev) != null ? ref10 : $('.slider-prev');
    this.$next = (ref11 = options.$next) != null ? ref11 : $('.slider-next');
    this.len = this.$items.length;
    if (this.isNotLoop) {
      this.activeIndex = 0;
      this.$prev.hide();
    } else {
      this.activeIndex = Math.min(Math.round(this.len / 2) - 1, 5);
      this.readyLoop(this.startIndex - this.activeIndex);
    }
    this.handleEvents();
    $(window).trigger('resize');
  }

  Slider.prototype.handleEvents = function() {
    this.$inner.on(MyEvent.start, (function(_this) {
      return function(event) {
        var ref, ref1;
        _this.client = {
          x: (ref = event.clientX) != null ? ref : event.originalEvent.touches[0].clientX,
          y: (ref1 = event.clientY) != null ? ref1 : event.originalEvent.touches[0].clientY
        };
        MyEvent.isDragging = true;
        _this.myStartHandler();
        if (!MyEvent.isSupportTouch) {
          event.preventDefault();
        }
      };
    })(this)).on(MyEvent.move, (function(_this) {
      return function(event) {
        var ref, ref1;
        _this.client = {
          x: (ref = event.clientX) != null ? ref : event.originalEvent.touches[0].clientX,
          y: (ref1 = event.clientY) != null ? ref1 : event.originalEvent.touches[0].clientY
        };
        _this.myMoveHandler();
        if (!MyEvent.isSupportTouch) {
          event.preventDefault();
        }
      };
    })(this)).on(MyEvent.end, (function(_this) {
      return function(event) {
        _this.myEndHandler();
        MyEvent.isDragging = false;
      };
    })(this)).on(MyEvent.wheel, (function(_this) {
      return function(event) {
        var delta;
        if (event.originalEvent.deltaY) {
          delta = -event.originalEvent.deltaY;
        } else if (event.originalEvent.wheelDelta) {
          delta = event.originalEvent.wheelDelta;
        } else {
          delta = -event.originalEvent.detail;
        }
        if (_this.hasWheelHandling) {
          _this.myWheelHandler(delta);
          event.preventDefault();
        }
      };
    })(this));
    $(document).on(MyEvent.touch, '[data-slide="prev"]', (function(_this) {
      return function() {
        if (!_this.$inner.is(':animated') && (!_this.isNotLoop || _this.activeIndex > 0)) {
          _this.move(-1);
        }
        return false;
      };
    })(this));
    $(document).on(MyEvent.touch, '[data-slide="next"]', (function(_this) {
      return function() {
        if (!_this.$inner.is(':animated') && (!_this.isNotLoop || _this.activeIndex < _this.len - 1)) {
          _this.move(1);
        }
        return false;
      };
    })(this));
    $(window).on('resize', this.resize);
  };

  Slider.prototype.myStartHandler = function() {
    MyEvent.points = [
      {
        x: this.client.x,
        y: this.client.y
      }
    ];
  };

  Slider.prototype.myMoveHandler = function() {
    var i, k, len, marginLeft, point, range, ref;
    if (!this.$inner.is(':animated') && MyEvent.isDragging) {
      MyEvent.points.push({
        x: this.client.x,
        y: this.client.y
      });
      marginLeft = parseInt(this.$inner.css('marginLeft'));
      ref = MyEvent.points;
      for (i = k = 0, len = ref.length; k < len; i = ++k) {
        point = ref[i];
        if (i > 0) {
          range = MyEvent.points[i].x - MyEvent.points[i - 1].x;
          this.$inner.css({
            'marginLeft': marginLeft + range + 'px'
          });
        }
      }
    }
  };

  Slider.prototype.myEndHandler = function() {
    if (MyEvent.isDragging) {
      this.flick();
    }
  };

  Slider.prototype.myWheelHandler = function(delta) {
    var scrollTop, sliderHeight, sliderTop, windowHeight;
    windowHeight = $(window).height();
    sliderTop = this.$slider.offset().top;
    sliderHeight = this.$slider.height();
    scrollTop = sliderTop + (sliderHeight - windowHeight) / 2;
    if (($(window).scrollTop() < scrollTop - 120 && delta < 0) || ($(window).scrollTop() > scrollTop + 120 && delta > 0)) {
      $('html, body').animate({
        scrollTop: scrollTop
      });
    } else {
      if (delta > 0 && !this.$inner.is(':animated') && this.activeIndex > 0) {
        this.move(-1);
      } else if (delta < 0 && !this.$inner.is(':animated') && this.activeIndex < this.len - 1) {
        this.move(1);
      }
    }
  };

  Slider.prototype.flick = function() {
    var arr, i, k, len, range, size, totalVal, val;
    range = MyEvent.points[0].x - MyEvent.points[MyEvent.points.length - 1].x;
    if (Math.abs(range) > 5) {
      if (range < 0) {
        arr = this.itemsWidth.slice(0, this.activeIndex).reverse();
      } else {
        arr = this.itemsWidth.slice(this.activeIndex, this.len - 1);
      }
      size = 0;
      totalVal = 0;
      for (i = k = 0, len = arr.length; k < len; i = ++k) {
        val = arr[i];
        totalVal += val / 3;
        if (Math.abs(range) < totalVal) {
          break;
        } else {
          size++;
          totalVal += val * 2 / 3;
        }
      }
      if (range < 0) {
        this.move(-size, 'fast');
      } else {
        this.move(size, 'fast');
      }
    }
  };

  Slider.prototype.readyLoop = function(size) {
    var i, k, l, ref, ref1;
    if (size < 0) {
      for (i = k = 0, ref = size; 0 <= ref ? k < ref : k > ref; i = 0 <= ref ? ++k : --k) {
        this.$items = this.$inner.children();
        this.$items.last().prependTo(this.$inner);
      }
    } else {
      for (i = l = 0, ref1 = size; 0 <= ref1 ? l < ref1 : l > ref1; i = 0 <= ref1 ? ++l : --l) {
        this.$items = this.$inner.children();
        this.$items.first().appendTo(this.$inner);
      }
    }
  };

  Slider.prototype.getAdjustedMargin = function(index) {
    var i, k, ref, result;
    result = $(window).width() / 2;
    this.$items = this.$inner.children();
    for (i = k = 0, ref = index; 0 <= ref ? k < ref : k > ref; i = 0 <= ref ? ++k : --k) {
      result -= this.$items.eq(i).outerWidth(true);
    }
    return result -= this.$items.eq(index).outerWidth(true) / 2;
  };

  Slider.prototype.move = function(size, speed) {
    var $currentItem, $nextItem, adjustedMargin, nextIndex;
    if (speed == null) {
      speed = 'slow';
    }
    $currentItem = this.$items.eq(this.activeIndex);
    nextIndex = this.activeIndex + size;
    if (this.isNotLoop) {
      this.activeIndex = nextIndex;
    }
    $nextItem = this.$items.eq(nextIndex);
    adjustedMargin = this.getAdjustedMargin(nextIndex);
    if (this.hasVisibility) {
      $currentItem.addClass('inactive');
    }
    this.$inner.animate({
      'marginLeft': adjustedMargin + 'px'
    }, speed, 'swing', (function(_this) {
      return function() {
        if (_this.hasVisibility) {
          $nextItem.removeClass('inactive');
        }
        if (!_this.isNotLoop) {
          _this.readyLoop(size);
          return _this.$inner.css('margin-left', _this.getAdjustedMargin(_this.activeIndex) + 'px');
        }
      };
    })(this));
    if (this.isNotLoop) {
      this.changeButtonsVisibility(this.activeIndex);
    }
    if (this.hasCaption) {
      this.changeCaption(nextIndex);
    }
  };

  Slider.prototype.changeButtonsVisibility = function(index) {
    if (index === 0) {
      return this.$prev.fadeOut('slow');
    } else if (index === 1 && this.$prev.css('display') === 'none') {
      return this.$prev.fadeIn('slow');
    } else if (index === this.len - 2 && this.$next.css('display') === 'none') {
      return this.$next.fadeIn('slow');
    } else if (index === this.len - 1) {
      return this.$next.fadeOut('slow');
    }
  };

  Slider.prototype.changeCaption = function(index) {
    var $nextItem, caption;
    $nextItem = this.$items.eq(index);
    caption = $nextItem.find('figcaption').html();
    this.$caption.animate({
      'opacity': 0
    }, 'fast', 'swing', function() {
      return $(this).html(caption).animate({
        'opacity': 1
      }, 'fast', 'swing');
    });
  };

  Slider.prototype.resize = function() {
    var baseWidth, totalWidth;
    this.itemsWidth = [];
    baseWidth = this.$slider.height();
    totalWidth = 0;
    this.$inner.width('');
    this.$items = this.$inner.children();
    this.$items.each((function(_this) {
      return function(index, el) {
        var $img, $target, ow, ph, pw, r;
        $target = $(el);
        if (_this.isUniformity) {
          _this.itemsWidth[index] = _this.$slider.find('.slider-item').width();
          totalWidth += _this.$slider.find('.slider-item').width();
        } else {
          $img = $target.find('img');
          pw = $img.attr('width');
          ph = $img.attr('height');
          r = pw / ph;
          if (pw < _this.standardImageSize && ph < _this.standardImageSize) {
            pw = Math.floor(baseWidth * pw / _this.standardImageSize);
            ph = Math.floor(baseWidth * ph / _this.standardImageSize);
            $img.width(pw).height(ph);
          } else if (r < 1) {
            pw = Math.floor(baseWidth * r);
            ph = Math.floor(baseWidth);
            $img.width(pw).height(ph);
          } else {
            pw = Math.floor(baseWidth);
            ph = Math.floor(baseWidth / r);
            $img.width(pw).height(ph);
          }
          ow = $img.outerWidth(true) - $img.width() + pw;
          _this.itemsWidth[index] = ow;
          totalWidth += ow;
        }
      };
    })(this));
    this.$inner.width(totalWidth).css('margin-left', this.getAdjustedMargin(this.activeIndex) + 'px');
    if (this.hasVisibility) {
      this.$items.each(function(index, el) {
        $(el).addClass('inactive');
      });
      this.$items.eq(this.activeIndex).removeClass('inactive');
    }
    if (this.hasCaption) {
      this.changeCaption(this.activeIndex);
    }
  };

  return Slider;

})();
