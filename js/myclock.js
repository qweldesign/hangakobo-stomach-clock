// Generated by CoffeeScript 1.12.7

/*
	MyClock
	Last update: 2017/10/15

  Author:	Taigo Ito
	Site: http://web.tgco.jp
	Twitter: @taigoito
	Location: Tokyo
 */
var MyClock,
  bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

MyClock = (function() {
  function MyClock(options) {
    if (options == null) {
      options = {};
    }
    this.resize = bind(this.resize, this);
    this.$el = $('#clock-base');
    this.$clock = $('#clock');
    this.$balloon = $('#clock-balloon');
    this.setBalloon();
    this.handleEvents();
    $(window).trigger('resize');
    setInterval((function(_this) {
      return function() {
        _this.tick();
      };
    })(this), 1000);
  }

  MyClock.prototype.tick = function() {
    var now;
    now = new Date();
    this.drowClock(now);
    this.changeTimeText(now);
  };

  MyClock.prototype.drowClock = function(dateTime) {
    var centralGradient, ctx, hour, min, radH, radM, radS, sec;
    ctx = document.getElementById('clock').getContext('2d');
    ctx.save();
    ctx.clearRect(0, 0, 240, 240);
    hour = dateTime.getHours() % 12;
    min = dateTime.getMinutes();
    sec = dateTime.getSeconds();
    radH = (Math.PI * 2) / 12 * (hour + min / 60);
    radM = (Math.PI * 2) / 60 * min;
    radS = (Math.PI * 2) / 60 * sec;
    this.drowHand(radH, 36, 8, '#444');
    this.drowHand(radM, 48, 4, '#444');
    this.drowHand(radS, 50, 2, '#f2e4af');
    centralGradient = ctx.createLinearGradient(117, 117, 123, 123);
    centralGradient.addColorStop(0, '#ed9');
    centralGradient.addColorStop(0.4, '#fdfaf0');
    centralGradient.addColorStop(0.6, '#fdfaf0');
    centralGradient.addColorStop(1.0, '#ed9');
    ctx.fillStyle = '#444';
    ctx.beginPath();
    ctx.arc(120, 120, 8, 0, 2 * Math.PI);
    ctx.closePath();
    ctx.fill();
    ctx.fillStyle = centralGradient;
    ctx.beginPath();
    ctx.arc(120, 120, 6, 0, 2 * Math.PI);
    ctx.closePath();
    ctx.fill();
    ctx.restore();
  };

  MyClock.prototype.drowHand = function(rotation, length, width, color) {
    var ctx;
    ctx = document.getElementById('clock').getContext('2d');
    ctx.save();
    ctx.lineWidth = width;
    ctx.strokeStyle = color;
    ctx.shadowColor = 'rgba(0, 0, 0, .3)';
    ctx.shadowOffsetX = 4;
    ctx.shadowOffsetY = 2;
    ctx.shadowBlur = 4;
    ctx.translate(120, 120);
    ctx.rotate(rotation);
    ctx.beginPath();
    ctx.moveTo(0, 0);
    ctx.lineTo(0, -length);
    ctx.stroke();
    ctx.restore();
  };

  MyClock.prototype.changeTimeText = function(dateTime) {
    var date, dateText, day, hour, meridian, min, month, sec, timeText, week, year;
    week = ['日', '月', '火', '水', '木', '金', '土'];
    year = dateTime.getFullYear();
    month = dateTime.getMonth() + 1;
    date = dateTime.getDate();
    day = week[dateTime.getDay()];
    meridian = dateTime.getHours > 12;
    meridian = meridian != null ? '午後' : '午前';
    hour = dateTime.getHours() % 12;
    min = dateTime.getMinutes();
    sec = dateTime.getSeconds();
    dateText = year + '年' + month + '月' + date + '日（' + day + '）';
    timeText = meridian + hour + '時' + min + '分' + sec + '秒';
    $(this.balloonText).text(timeText);
  };

  MyClock.prototype.setBalloon = function() {
    this.balloonImage = document.createElement('canvas');
    this.balloonImage.id = 'balloon-image';
    this.balloonImage.width = 240;
    this.balloonImage.height = 240;
    this.$balloon.append($(this.balloonImage));
    this.balloonText = document.createElement('p');
    this.balloonText.id = 'current-time';
    this.$balloon.append($(this.balloonText));
    this.drowBalloon();
  };

  MyClock.prototype.drowBalloon = function() {
    var ctx;
    ctx = this.balloonImage.getContext('2d');
    ctx.clearRect(0, 0, 240, 240);
    ctx.fillStyle = '#fff';
    ctx.save();
    ctx.translate(120, 234);
    ctx.rotate(-Math.PI / 180 * 30);
    ctx.scale(0.5, 1);
    ctx.beginPath();
    ctx.arc(0, -60, 60, 0, 2 * Math.PI);
    ctx.closePath();
    ctx.fill();
    ctx.restore();
    ctx.save();
    ctx.globalCompositeOperation = 'destination-out';
    ctx.translate(120, 234);
    ctx.scale(0.5, 1);
    ctx.beginPath();
    ctx.arc(0, -60, 60, 0, 2 * Math.PI);
    ctx.closePath();
    ctx.fill();
    ctx.restore();
    ctx.save();
    ctx.scale(4, 3);
    ctx.beginPath();
    ctx.arc(30, 30, 30, 0, 2 * Math.PI);
    ctx.closePath();
    ctx.fill();
    ctx.restore();
  };

  MyClock.prototype.handleEvents = function() {
    $(window).on('resize', this.resize);
  };

  MyClock.prototype.resize = function() {
    this.resizeClock();
    this.resizeBalloon();
  };

  MyClock.prototype.resizeClock = function() {
    var clockWidth;
    clockWidth = this.$el.width() / 2;
    this.$clock.width(clockWidth).height(clockWidth);
  };

  MyClock.prototype.resizeBalloon = function() {
    $(this.balloonImage).width(this.$balloon.width()).height(this.$balloon.height());
  };

  return MyClock;

})();
